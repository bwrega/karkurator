plugins {
    id 'java'
    id 'org.javamodularity.moduleplugin' version '1.7.0'
    id 'application'
    id "com.google.osdetector" version "1.6.2"
}

group 'com.realizationtime'
version '1.0-SNAPSHOT'

sourceCompatibility = '14'

repositories {
    mavenCentral()
}

application {
    mainModule = 'com.realizationtime.karkurator'
    mainClass = 'com.realizationtime.karkurator.KarkuratorMain'
    applicationDefaultJvmArgs = ['--enable-preview']
}

ext {
    lombokVersion = '1.18.12'
    javaFxVersion = '14.0.1'
    javaFxOs = {
        def oses = ["linux"  : "linux",
                    "windows": "win",
                    "osx"    : "mac"]
        def detectedOs = oses[osdetector.os]
        if (detectedOs == null) {
            def supportedPlatforms = oses.keySet().join("', '")
            throw new GradleException(
                String.format(
                    "Unsupported JavaFX platform found: '%s'! " +
                        "This plugin is designed to work on supported platforms only. " +
                        "Currently supported platforms are '%s'.", osdetector.os, supportedPlatforms)
            )
        }
        detectedOs
    }()
}

dependencies {
    implementation "org.openjfx:javafx-base:${javaFxVersion}:${javaFxOs}"
    implementation "org.openjfx:javafx-graphics:${javaFxVersion}:${javaFxOs}"
    implementation "org.openjfx:javafx-fxml:${javaFxVersion}:${javaFxOs}"
    implementation "org.openjfx:javafx-controls:${javaFxVersion}:${javaFxOs}"
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'
    testCompile "org.assertj:assertj-core:3.11.1"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
}

tasks.withType(JavaCompile).each {
    it.options.compilerArgs.add('--enable-preview')
}

run.dependsOn build

test {
    useJUnitPlatform()
    jvmArgs(['--enable-preview'])
}
